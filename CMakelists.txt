cmake_minimum_required(VERSION 3.10) 

SET(CMAKE_C_COMPILER gcc)
SET(CMAKE_CXX_COMPILER g++)

# set the project name 
project(demo VERSION 1.0) 

set(CMAKE_PREFIX_PATH $ENV{QT_DIR})

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set ( CMAKE_AUTOUIC ON )
set ( CMAKE_AUTOMOC ON )
set ( CMAKE_AUTORCC ON )

set (OPENSSL_ROOT_DIR ${CMAKE_SOURCE_DIR}/lib/openssl-0.9.8k_X64)

find_package(Qt6 COMPONENTS Widgets Core REQUIRED)

aux_source_directory(src/pcap PCAP_SRC_LIST)
aux_source_directory(src/gui GUI_SRC_LIST)

set( QT_HEADERS include/mainwindow.h )

# add lib path
link_directories(${CMAKE_SOURCE_DIR}/lib/x64)

qt6_wrap_ui( UI_HEADERS ${CMAKE_SOURCE_DIR}/src/mainwindow.ui )

add_executable(${CMAKE_PROJECT_NAME} WIN32 ${PCAP_SRC_LIST} ${GUI_SRC_LIST} ${QT_HEADERS} ${UI_HEADERS})

# target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)



# set output path
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY 	${CMAKE_SOURCE_DIR}/build)

# add the executable 
# add_executable(demo src/dump.c src/mainwindow.cpp)

# link lib file
target_link_libraries(${CMAKE_PROJECT_NAME} Packet)
target_link_libraries(${CMAKE_PROJECT_NAME} wpcap)

target_link_libraries(${CMAKE_PROJECT_NAME}
    Qt6::Widgets
    Qt6::Core)

# qt_import_qml_plugins(${CMAKE_PROJECT_NAME})



target_include_directories(demo PUBLIC 
                           "${PROJECT_BINARY_DIR}" 
                           "include"
                           ) 
